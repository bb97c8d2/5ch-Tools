// ==UserScript==
// @name         Donguri Bag Operator
// @namespace    https://donguri.5ch.net/
// @version      3.1.2
// @description  5ちゃんねる「どんぐりシステム」の「アイテムバッグ」ページ機能改良スクリプト。
// @author       どんぐりID: bb97c8d2
// @contributor  ChatGPT (OpenAI, assistant)
// @license      Non-Commercial Personal Use Only
// @match        https://donguri.5ch.net/bag
// @match        https://donguri.5ch.net/transfer
// @run-at       document-end
// @grant        none
// ==/UserScript==

/*
Copyright (c) 2025 bb97c8d2

本スクリプトは、非商用・個人利用に限り、自由に使用・改変・再配布が可能です。
商用利用、再販売、営利目的での利用は禁止します。
利用により生じた損害について、作者は一切の責任を負いません。
*/

(function() {
  'use strict';

  // --- 共通定義 ---
  const anchorKey    = 'donguriItemTableResetAnchor';
  const overlayId    = 'donguriLoadingOverlay';
  const tableIds     = ['necklaceTable', 'weaponTable', 'armorTable'];
  const titleMap     = { necklaceTable: 'necklaceTitle', weaponTable: 'weaponTitle', armorTable: 'armorTitle' };
  const labelMap     = { necklaceTable: '━━ ネックレス ━━', weaponTable: '━━ 武器 ━━', armorTable: '━━ 防具 ━━' };
  const columnIds    = {
    necklaceTable: { 'ネックレス':'necClm-Name','装':'necClm-Equp','解':'necClm-Lock','属性':'necClm-StEf','マリモ':'necClm-Mrim','分解':'necClm-Rycl','増減':'necClm-Dlta' },
    weaponTable:   { '武器':'wepClm-Name','装':'wepClm-Equp','解':'wepClm-Lock','ATK':'wepClm-Atk','SPD':'wepClm-Spd','CRIT':'wepClm-Crit','ELEM':'wepClm-Elem','MOD':'wepClm-Mod','マリモ':'wepClm-Rrim','分解':'wepClm-Rycl' },
    armorTable:    { '防具':'amrClm-Name','装':'amrClm-Equp','解':'amrClm-Lock','DEF':'amrClm-Def','WT':'amrClm-Wgt','CRIT':'amrClm-Crit','ELEM':'amrClm-Elem','MOD':'amrClm-Mod','マリモ':'amrClm-Rrim','分解':'amrClm-Rycl' }
  };
  const attrColors   = { '火':'#FFEEEE','氷':'#EEEEFF','雷':'#FFFFEE','風':'#EEFFEE','地':'#FFF0E0','水':'#EEFFFF','光':'#FFFFF0','闇':'#F0E0FF','なし':'#FFFFFF' };
  const attrOrder    = { '火':0,'氷':1,'雷':2,'風':3,'地':4,'水':5,'光':6,'闇':7,'なし':8 };
  const rarityOrder  = { 'UR':0,'SSR':1,'SR':2,'R':3,'N':4 };
  const buffKeywords = ['強化された','増幅された','力を増した','クリアになった','加速した','高まった','固くなった','尖らせた'];
  const debuffKeywords = ['静まった','弱まった','制限された','ぼやけた','減速した','減少した','砕けた','薄まった','緩んだ','侵食された','鈍らせた'];
  const statusMap    = {
    '攻撃の嵐':'storm','元素の混沌':'chaos','破滅の打撃':'blow','解き放たれた力':'release',
    '精度の道':'accuracy','時間の流れ':'time','生命の本質':'life','石の守り':'stone',
    '守護者の直感':'intuition','影のヴェール':'veil','運命の手':'hand','運命の盾':'shield','運命の賭博':'bet'
  };

  // --- Transfer ページ用: 送信先IDをデフォルト入力 ---
  if (location.pathname === '/transfer') {
    window.addEventListener('load', () => {
      const input = document.getElementById('recipientid');
      if (input) {
        input.value = 'bb97c8d2';
      }
    });
    return;
  }

  // --- セルクリック位置の保持および中央スクロール機能 ---
  let lastClickedCellId = null;
  function recordClickedCell(cell, table) {
    let cellId = cell.id;
    if (!cellId) {
      const rows = Array.from(table.tBodies[0].rows);
      const rowIndex = rows.indexOf(cell.parentElement);
      const cellIndex = Array.prototype.indexOf.call(cell.parentElement.cells, cell);
      cellId = `${table.id}-r${rowIndex}-c${cellIndex}`;
      cell.id = cellId;
    }
    lastClickedCellId = cellId;
    sessionStorage.setItem(anchorKey, cellId);
  }
  function scrollToAnchorCell() {
    if (!lastClickedCellId) return;
    const el = document.getElementById(lastClickedCellId);
    if (el) el.scrollIntoView({ behavior:'auto', block:'center', inline:'nearest' });
  }

  function showOverlay(text) {
    let ov = document.getElementById(overlayId);
    if (!ov) {
      ov = document.createElement('div');
      ov.id = overlayId;
      Object.assign(ov.style, {
        position:'fixed', top:0, left:0, width:'100%', height:'100%',
        backgroundColor:'rgba(0,0,0,0.5)', color:'#fff',
        display:'flex', justifyContent:'center', alignItems:'center',
        fontSize:'1.5em', zIndex:9999
      });
      document.body.appendChild(ov);
    }
    ov.textContent = text;
    ov.style.display = 'flex';
    ov.addEventListener('click', hideOverlay, { once:true });
  }
  function hideOverlay() {
    const ov = document.getElementById(overlayId);
    if (ov) ov.style.display = 'none';
  }
  function parseVal(txt){ return parseInt((txt||'').replace(/[^0-9]/g,''),10)||0; }
  function extractAttr(txt){ return txt.replace(/[0-9]+/g,'').trim()||'なし'; }
  function extractR(txt){ const m=txt.match(/UR|SSR|SR|R|N/); return m?m[0]:'N'; }
  function parseDelta(txt){
    if(!txt) return 0;
    if(txt.startsWith('△')) return parseInt(txt.slice(1),10)||0;
    if(txt.startsWith('▼')) return -parseInt(txt.slice(1),10)||0;
    return parseInt(txt,10)||0;
  }

  // --- ロック/アンロック切替機能 ---
  function initLockToggle() {
    tableIds.forEach(id => {
      const table = document.getElementById(id);
      if (!table || !table.tHead) return;
      const colMap = columnIds[id];
      const headers = Array.from(table.tHead.rows[0].cells);
      let lockIdx=-1, ryclIdx=-1;
      headers.forEach((th,i)=>{
        const title = th.textContent.trim();
        if (!colMap[title]) return;
        th.classList.add(colMap[title]);
        if (title === '解') lockIdx = i;
        else if (title === '分解') ryclIdx = i;
      });
      Array.from(table.tBodies[0].rows).forEach(row=>{
        if (lockIdx >= 0) row.cells[lockIdx].classList.add(colMap['解']);
        if (ryclIdx >= 0) row.cells[ryclIdx].classList.add(colMap['分解']);
      });
      if (lockIdx >= 0) {
        Array.from(table.tBodies[0].rows).forEach(row=>{
          const cell = row.cells[lockIdx];
          const aLink = cell.querySelector('a[href*="/lock/"]');
          if (aLink) {
            cell.style.backgroundColor = '#FF6600';
            cell.style.color           = '#FFFFFF';
            aLink.style.color          = '#FFFFFF';
          }
        });
      }
      table.addEventListener('click', async e => {
        const a = e.target.closest('a[href*="/lock/"],a[href*="/unlock/"]');
        if (!a) return;
        const td = a.closest(`td.${colMap['解']}`);
        if (!td) return;
        e.preventDefault();
        showOverlay(a.href.includes('/unlock/') ? 'アンロックしています...' : 'ロックしています...');
        try {
          const m = a.href.match(/\/(unlock|lock)\/(\d+)/);
          if (!m) return;
          const action = m[1], itemId = m[2];
          const res = await fetch(a.href);
          const html = await res.text();
          const doc = new DOMParser().parseFromString(html,'text/html');
          const newTable = doc.getElementById(id);
          let newLockIdx=-1, newRyclIdx=-1;
          Array.from(newTable.tHead.rows[0].cells).forEach((th,i)=>{
            const t = th.textContent.trim();
            if (t === '解') newLockIdx = i;
            else if (t === '分解') newRyclIdx = i;
          });
          const targetA = Array.from(newTable.tBodies[0].rows)
            .map(r => r.cells[newLockIdx])
            .find(c => c.querySelector(`a[href*="/${itemId}"]`));
          const targetB = targetA ? targetA.closest('tr').cells[newRyclIdx] : null;
          td.innerHTML = targetA.innerHTML;
          td.closest('tr').querySelector(`td.${colMap['分解']}`).innerHTML = targetB?.innerHTML || '';
          if (localStorage.getItem(`donguriHideColumn-${id}`) === 'true') {
            table.querySelectorAll(`.${colMap['分解']}`).forEach(el => el.style.display = 'none');
          }
          Array.from(table.tBodies[0].rows).forEach(row => {
            const cell = row.cells[newLockIdx];
            const a2 = cell.querySelector('a[href*="/lock/"]');
            if (a2) {
              cell.style.backgroundColor = '#FF6600';
              cell.style.color           = '#FFFFFF';
              a2.style.color             = '#FFFFFF';
            } else {
              cell.style.backgroundColor = '';
              cell.style.color           = '';
            }
          });
        } catch (err) {
          console.warn(err);
        } finally {
          hideOverlay();
        }
      });
    });
  }

  // --- 分解機能改良 ---
  function initRecycle(){
    tableIds.forEach(id=>{
      const table = document.getElementById(id);
      if (!table) return;
      table.addEventListener('click', async e => {
        const a = e.target.closest('a[href*="/recycle/"]');
        if (!a) return;
        e.preventDefault();
        const m = a.href.match(/\/recycle\/(\d+)/);
        if (!m) return;
        const itemId = m[1];
        showOverlay('分解しています...');
        try {
          const res = await fetch(a.href);
          const html = await res.text();
          const doc = new DOMParser().parseFromString(html,'text/html');
          const newTable = doc.getElementById(id);
          const equpClass = columnIds[id]['装'];
          let equpIdx=-1;
          Array.from(newTable.tHead.rows[0].cells).forEach((th,i)=>{
            if (th.classList.contains(equpClass)) equpIdx = i;
          });
          const found = Array.from(newTable.tBodies[0].rows)
            .map(r => r.cells[equpIdx])
            .find(c => c.querySelector(`a[href*="/${itemId}"]`));
          if (found) { hideOverlay(); location.reload(); return; }
          const curr = document.getElementById(id);
          Array.from(curr.tBodies[0].rows).forEach(row=>{
            const cell = row.cells[equpIdx];
            if (cell.querySelector(`a[href*="/${itemId}"]`)) row.remove();
          });
        } catch(err) {
          console.warn(err);
        } finally {
          hideOverlay();
        }
      });
    });
  }

  // --- テーブル加工機能 ---
  function processTable(id){
    const table = document.getElementById(id);
    if (!table || !table.tHead) return;
    table.style.margin = '8px 0px 24px 0px';
    const colMap = columnIds[id];
    if (!document.getElementById(titleMap[id])) {
      const h3 = document.createElement('h3');
      h3.id = titleMap[id];
      h3.textContent = labelMap[id];
      h3.style.padding = '0px';
      h3.style.margin  = '0px';
      table.insertAdjacentElement('beforebegin', h3);
    }
    const headerRow = table.tHead.rows[0];
    const hdrs = Array.from(headerRow.cells);
    hdrs.forEach(th=>{
      th.style.backgroundColor = '#F0F0F0';
      th.style.color = '#000';
      th.style.cursor = 'default';
      const cls = colMap[th.textContent.trim()];
      if (cls) th.classList.add(cls);
    });
    const idxMap = {};
    hdrs.forEach((th,i)=>{ const t = th.textContent.trim(); if (colMap[t]) idxMap[t] = i; });

    if (id === 'necklaceTable') {
      const pos = idxMap['属性'] + 1;
      const dCls = colMap['増減'];
      const dTh = document.createElement('th');
      dTh.textContent = '増減';
      dTh.className = dCls;
      Object.assign(dTh.style, { backgroundColor:'#F0F0F0', color:'#000', textAlign:'center', cursor:'pointer' });
      headerRow.insertBefore(dTh, headerRow.cells[pos]);
      Array.from(table.tBodies[0].rows).forEach(row=>{
        const td = document.createElement('td');
        td.className = dCls;
        td.style.textAlign = 'center';
        row.insertBefore(td, row.cells[pos]);
        let tot = 0;
        row.cells[idxMap['属性']].querySelectorAll('li').forEach(li=>{
          const m = li.textContent.trim().match(/(\d+)%\s*(.+)$/);
          if (!m) return;
          const v = parseInt(m[1],10), k = m[2].trim();
          tot += buffKeywords.includes(k) ? v : debuffKeywords.includes(k) ? -v : 0;
        });
        td.textContent = tot>0?'△'+tot:tot<0?'▼'+Math.abs(tot):'';
      });
      let asc = true;
      dTh.addEventListener('click', ()=>{
        const rows = Array.from(table.tBodies[0].rows);
        rows.sort((a,b)=> asc
          ? parseDelta(b.cells[pos].textContent)-parseDelta(a.cells[pos].textContent)
          : parseDelta(a.cells[pos].textContent)-parseDelta(b.cells[pos].textContent)
        );
        rows.forEach(r=> table.tBodies[0].appendChild(r));
        asc = !asc;
        scrollToAnchorCell();
      });

      const sc = document.createElement('div');
      sc.style.display = 'flex';
      sc.style.flexWrap = 'wrap';
      sc.style.gap = '8px';
      sc.style.margin = '0px';
      const chks = [];
      Object.keys(statusMap).forEach(label=>{
        const lb = document.createElement('label');
        lb.style.fontSize = '1.0em';
        const ck = document.createElement('input');
        ck.type = 'checkbox';
        ck.value = label;
        ck.checked = false;
        ck.addEventListener('change', applyFilter);
        chks.push(ck);
        lb.append(ck, document.createTextNode(' '+label));
        sc.appendChild(lb);
      });
      table.insertAdjacentElement('beforebegin', sc);

      const bd = document.createElement('div');
      bd.style.display = 'flex';
      bd.style.gap = '8px';
      bd.style.margin = '0px';
      [['全解除',()=>{ chks.forEach(c=>c.checked=false); applyFilter(); }], ['再読込',()=>{ chks.forEach(c=>c.checked=false); applyFilter(); }]]
      .forEach(([t,fn])=>{
        const b = document.createElement('button');
        b.textContent = t;
        Object.assign(b.style, { fontSize:'0.9em', padding:'4px 8px', margin:'10px' });
        b.addEventListener('click', fn);
        bd.appendChild(b);
      });
      sc.insertAdjacentElement('beforebegin', bd);

      function applyFilter(){
        const act = chks.filter(c=>c.checked).map(c=>c.value);
        Array.from(table.tBodies[0].rows).forEach(r=>{
          if (act.length === 0) {
            r.style.display = '';
            return;
          }
          const txt = r.cells[idxMap['属性']].textContent;
          r.style.display = act.every(a=>txt.includes(a)) ? '' : 'none';
        });
        scrollToAnchorCell();
      }
      applyFilter();
    }

    if (id==='weaponTable'||id==='armorTable') {
      const ui = document.createElement('div');
      ui.className = 'filter-ui';
      ui.style.margin = '0px';
      const r2 = document.createElement('div');
      r2.style.marginTop = '4px';
      [['全選択', ()=>{ setAll(true); applyFilter(); applyColor(); }], ['全解除', ()=>{ setAll(false); applyFilter(); applyColor(); }], ['再読込', ()=>location.reload()]]
      .forEach(([txt,fn])=>{
        const b = document.createElement('button');
        b.textContent = txt;
        Object.assign(b.style, { fontSize:'0.9em', padding:'4px 8px', margin:'10px' });
        b.addEventListener('click', fn);
        r2.appendChild(b);
      });
      ui.appendChild(r2);

      const r3 = document.createElement('div');
      Object.assign(r3.style, { marginTop:'6px', display:'flex', alignItems:'center' });
      const s3 = document.createElement('span'); s3.textContent = 'Rarity：'; s3.style.fontSize = '1.2em';
      r3.appendChild(s3);
      const elm = {};
      ['UR','SSR','SR','R','N'].forEach(rk=>{
        const lbl = document.createElement('label');
        lbl.style.margin = '0 4px';
        const chk = document.createElement('input');
        chk.type = 'checkbox';
        chk.checked = true;
        chk.addEventListener('change', applyFilter);
        elm[rk] = chk;
        lbl.append(chk, document.createTextNode(' '+rk));
        r3.appendChild(lbl);
      });
      ui.appendChild(r3);

      const r4 = document.createElement('div');
      Object.assign(r4.style, { marginTop:'6px', display:'flex', alignItems:'center' });
      const s4 = document.createElement('span'); s4.textContent = 'Element：'; s4.style.fontSize = '1.2em';
      r4.appendChild(s4);
      const rarObj = {};
      Object.keys(attrColors).forEach(a=>{
        const lbl = document.createElement('label');
        lbl.style.margin = '0 4px';
        const chk = document.createElement('input');
        chk.type = 'checkbox';
        chk.checked = true;
        chk.addEventListener('change', ()=>{ applyFilter(); applyColor(); });
        rarObj[a] = chk;
        lbl.append(chk, document.createTextNode(' '+a));
        r4.appendChild(lbl);
      });
      ui.appendChild(r4);

      table.insertAdjacentElement('beforebegin', ui);

      const elemCol = idxMap['ELEM'];
      const rankCol = idxMap[id==='weaponTable'?'武器':'防具'];
      const mrimCol = idxMap['マリモ'];
      let ascMulti = true;

      function setAll(v){ Object.values(elm).forEach(x=>x.checked=v); Object.values(rarObj).forEach(x=>x.checked=v); }
      function applyColor(){ Array.from(table.tBodies[0].rows).forEach(r=>{ const v=extractAttr(r.cells[elemCol].textContent); r.cells[elemCol].style.backgroundColor = attrColors[v]; }); }
      function applyFilter(){ Array.from(table.tBodies[0].rows).forEach(r=>{ const e=extractAttr(r.cells[elemCol].textContent), rt=extractR(r.cells[rankCol].textContent); r.style.display = (elm[rt].checked && rarObj[e].checked) ? '' : 'none'; }); }

      function multiSort(order){
        const rows = Array.from(table.tBodies[0].rows).filter(r=>r.style.display!=='none');
        rows.sort((a,b)=>{
          const ra=extractR(a.cells[rankCol].textContent), rb=extractR(b.cells[rankCol].textContent);
          let d = order ? rarityOrder[ra]-rarityOrder[rb] : rarityOrder[rb]-rarityOrder[ra];
          if(d) return d;
          const ea=extractAttr(a.cells[elemCol].textContent), eb=extractAttr(b.cells[elemCol].textContent);
          d = order ? attrOrder[ea]-attrOrder[eb] : attrOrder[eb]-attrOrder[ea];
          if(d) return d;
          const ma=parseVal(a.cells[mrimCol].textContent), mb=parseVal(b.cells[mrimCol].textContent);
          return order ? mb-ma : ma-mb;
        });
        rows.forEach(r=>table.tBodies[0].appendChild(r));
      }

      hdrs[elemCol].style.cursor='pointer';
      hdrs[elemCol].addEventListener('click', ()=>{
        multiSort(ascMulti);
        ascMulti=!ascMulti;
        applyFilter();
        applyColor();
        scrollToAnchorCell();
      });

      Array.from(table.tBodies[0].rows).forEach(r=>{ const cell=r.cells[elemCol];
        cell.style.cursor='pointer';
        cell.addEventListener('click', ()=>{
          const clicked = extractAttr(cell.textContent);
          Object.keys(rarObj).forEach(a=>rarObj[a].checked=(a===clicked));
          applyFilter(); applyColor(); multiSort(ascMulti); ascMulti=!ascMulti;
          scrollToAnchorCell();
        });
      });

      const nameTitle = id==='weaponTable'?'武器':'防具';
      const nameCol = idxMap[nameTitle];
      const oldTh = hdrs[nameCol];
      const newTh = oldTh.cloneNode(true);
      oldTh.parentNode.replaceChild(newTh,oldTh);
      newTh.style.cursor='pointer';
      let ascName = true;
      newTh.addEventListener('click', ()=>{
        multiSort(ascName);
        ascName=!ascName;
        scrollToAnchorCell();
      });

      Array.from(table.tBodies[0].rows).forEach(r=>{ const cell=r.cells[nameCol];
        cell.style.cursor='pointer';
        cell.addEventListener('click', ()=>{
          const clicked = extractR(cell.textContent);
          Object.keys(elm).forEach(rk=>elm[rk].checked=(rk===clicked));
          applyFilter(); applyColor(); multiSort(true);
          scrollToAnchorCell();
        });
      });

      applyFilter(); applyColor();
    }
  }

  // --- バーガーメニューUI初期化 (v2.1.4 修正 + v3.1.2 追記) ---
  function initMenu(){
    const btn = document.createElement('div');
    Object.assign(btn.style, {
      position:'fixed', bottom:'0', left:'0', width:'50px', height:'50px',
      padding:'0px', boxSizing:'border-box', border:'2px solid #006600', borderRadius:'8px',
      backgroundColor:'#009966', color:'#FFFFFF',
      display:'flex', justifyContent:'center', alignItems:'center',
      fontSize:'2.0em', fontWeight:'bold', cursor:'pointer', zIndex:'999999'
    });
    btn.textContent = '☰';
    document.body.appendChild(btn);

    const menu = document.createElement('div');
    Object.assign(menu.style, {
      position:'fixed', bottom:'50px', left:'0', backgroundColor:'#F6FFFF',
      border:'3px solid #006600', borderRadius:'8px', padding:'12px 6px',
      display:'none', flexDirection:'column', zIndex:'999998'
    });
    const spacer = () => {
      const sp = document.createElement('div');
      sp.style.height = '0.5em';
      return sp;
    };

    // 「ロックされていないアイテムを全て分解する」ボタンを隠すチェックボックス
    const hideRecycleLbl = document.createElement('label');
    hideRecycleLbl.style.fontSize = '0.9em';
    const hideRecycleCk = document.createElement('input');
    hideRecycleCk.type = 'checkbox';
    hideRecycleCk.addEventListener('change', ()=>{
      const hide = hideRecycleCk.checked;
      document.querySelectorAll('button, a').forEach(el=>{
        if (el.textContent === 'ロックされていないアイテムを全て分解する' && !menu.contains(el)) {
          el.style.display = hide ? 'none' : '';
        }
      });
    });
    hideRecycleLbl.append(hideRecycleCk, document.createTextNode(' 「ロックされていないアイテムを全て分解する」ボタンを隠す'));
    menu.appendChild(hideRecycleLbl);
    menu.appendChild(spacer());

    // 「テーブルの「分解」列を隠す」チェックボックス
    const lbl = document.createElement('label');
    lbl.style.fontSize = '0.9em';
    const cbg = document.createElement('input');
    cbg.type = 'checkbox';
    cbg.checked = localStorage.getItem('donguriHideColumn-global') === 'true';
    cbg.addEventListener('change', ()=>{
      const d = cbg.checked ? 'none' : '';
      tableIds.forEach(id=>{
        document.querySelectorAll(`.${columnIds[id]['分解']}`).forEach(el=>el.style.display = d);
      });
      localStorage.setItem('donguriHideColumn-global', cbg.checked);
    });
    lbl.append(cbg, document.createTextNode(' テーブルの「分解」列を隠す'));
    menu.appendChild(lbl);
    menu.appendChild(spacer());

    // 「ロックされていないアイテムを全て分解する」ボタン
    const allForm = document.createElement('form');
    allForm.action = 'https://donguri.5ch.net/recycleunlocked';
    allForm.method = 'POST';
    // ここで左寄せとパディングを指定
    allForm.style.textAlign = 'left';
    allForm.style.alignSelf = 'flex-start';
    const allBtn = document.createElement('button');
    allBtn.type = 'submit';
    allBtn.style.fontSize = '0.9em';
    allBtn.style.padding = '6px 12px';
    allBtn.textContent = 'ロックされていないアイテムを全て分解する';
    allForm.appendChild(allBtn);
    menu.appendChild(allForm);
    menu.appendChild(spacer());

    // ナビゲーションボタン
    const nav = document.createElement('div');
    nav.style.display = 'flex';
    nav.style.gap = '4px';

    const pageTopBtn = document.createElement('button');
    pageTopBtn.style.fontSize = '0.9em';
    pageTopBtn.textContent = 'PageTOP';
    pageTopBtn.addEventListener('click', ()=> window.scrollTo({ top:0, behavior:'smooth' }));
    nav.appendChild(pageTopBtn);

    [{text:'ネックレス',id:'necklaceTitle'},{text:'武器',id:'weaponTitle'},{text:'防具',id:'armorTitle'}]
    .forEach(o=>{
      const b = document.createElement('button');
      b.style.fontSize = '0.8em';
      b.textContent = o.text;
      b.addEventListener('click', ()=> document.getElementById(o.id)?.scrollIntoView({ behavior:'smooth' }));
      nav.appendChild(b);
    });

    menu.appendChild(nav);
    menu.appendChild(spacer());

    // カスタムリンク
    const link = document.createElement('div');
    link.style.fontSize = '0.7em';
    link.innerHTML = 'customized by bb97c8d2　（<a href="https://donguri.5ch.net/transfer" target="_blank">どんぐり転送サービス</a>）';
    menu.appendChild(link);

    document.body.appendChild(menu);

    btn.addEventListener('click', ()=> {
      if (menu.style.display === 'none') {
        menu.style.display = 'flex';
        menu.style.visibility = 'hidden';
        // 幅を揃える
        const navBtns = nav.querySelectorAll('button');
        let maxW = 0;
        navBtns.forEach(b=>{
          const w = b.getBoundingClientRect().width;
          if (w > maxW) maxW = w;
        });
        navBtns.forEach(b=> b.style.width = maxW + 'px');
        menu.style.visibility = '';
      } else {
        menu.style.display = 'none';
      }
    });
  }

  // --- 初期化 ---
  window.addEventListener('load', ()=>{
    try {
      const id = sessionStorage.getItem(anchorKey);
      if (id) {
        lastClickedCellId = id;
        document.getElementById(id)?.scrollIntoView({ behavior:'auto', block:'center', inline:'nearest' });
      }
      sessionStorage.removeItem(anchorKey);
    } catch {}
    initLockToggle();
    tableIds.forEach(processTable);
    initRecycle();
    initMenu();
    tableIds.forEach(id => {
      const table = document.getElementById(id);
      if (!table) return;
      table.addEventListener('click', e => {
        const cell = e.target.closest('td');
        if (!cell || !table.contains(cell)) return;
        recordClickedCell(cell, table);
      }, true);
    });
  });

})();
